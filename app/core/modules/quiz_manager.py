from typing import Dict, Optional, Any


class QuizManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.
    –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–∞—Ö –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –∞ —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

    –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä—è—Ö:
    - quizzes: –•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∞—Ö.
    - quiz_id: –•—Ä–∞–Ω–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ chat_id –∏ quiz_code.
    """

    quizzes: Dict[str, Dict[Any, Any]] = {}
    quiz_id: Dict[int, str] = {}

    @classmethod
    def initialize_quiz(cls, chat_id: int, code: str) -> str:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É chat_id –∏ –∫–æ–¥–æ–º —Ç–µ—Å—Ç–∞.

        :param chat_id: ID —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç.
        :param code: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Ç–µ—Å—Ç–∞.
        :return: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        """
        if code not in cls.quizzes:
            cls.quizzes[code] = {'author_id': chat_id}
        cls.quiz_id[chat_id] = code
        return code

    @classmethod
    def is_valid(cls, quiz_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç —Å –¥–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º.

        :param quiz_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        :return: True, –µ—Å–ª–∏ —Ç–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
        """
        return quiz_id in cls.quizzes

    @classmethod
    def check_can_create_question(cls, chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏–Ω–∞—á–µ False.
        """
        return chat_id in cls.quiz_id

    @classmethod
    def create_question_name(cls, chat_id: int, question_number: str, question: str) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :param question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        :return: True, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        cls.quizzes[cls.quiz_id[chat_id]][question_number] = {'question': question}
        return True

    @classmethod
    def delete_question(cls, chat_id: int, question_number: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–µ—Å—Ç–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        :return: True, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        quiz_id = cls.quiz_id.get(chat_id)
        if quiz_id is None:
            return False

        if question_number not in cls.quizzes[quiz_id]:
            return False

        del cls.quizzes[quiz_id][question_number]
        cls.reindex_questions(quiz_id)

        return True

    @classmethod
    def create_question_options(cls, chat_id: int, question_number: str, options: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :param options: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.
        :return: True, –µ—Å–ª–∏ –æ–ø—Ü–∏–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        cls.quizzes[cls.quiz_id[chat_id]][question_number]['options'] = options
        return True

    @classmethod
    def create_question_correct_answer(cls, chat_id: int, question_number: str, correct_answer: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :param correct_answer: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
        :return: True, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        cls.quizzes[cls.quiz_id[chat_id]][question_number]['correct_answer'] = correct_answer
        return True

    @classmethod
    def create_question_points(cls, chat_id: int, question_number: str, points: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :param points: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤.
        :return: True, –µ—Å–ª–∏ –±–∞–ª–ª—ã –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        cls.quizzes[cls.quiz_id[chat_id]][question_number]['points'] = points
        return True

    @classmethod
    def create_question_gpt(cls, chat_id: int, question_number: str, gpt: str) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPT –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :param gpt: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPT.
        :return: True, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False.
        """
        if not cls.check_can_create_question(chat_id):
            return False

        cls.quizzes[cls.quiz_id[chat_id]][question_number]['gpt'] = gpt
        return True

    @classmethod
    def get_question(cls, quiz_id: str, question_number: str) -> Optional[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É.

        :param quiz_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        :param question_number: –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞.
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        return cls.quizzes.get(quiz_id, {}).get(question_number)

    @classmethod
    def get_author_test(cls, test_id: str) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –∞–≤—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–∞.

        :param test_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        :return: ID –∞–≤—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–∞.
        """
        return cls.quizzes[test_id]['author_id']

    @classmethod
    def is_author(cls, chat_id: int, test_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º —Ç–µ—Å—Ç–∞.

        :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param test_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ False.
        """
        return cls.quizzes.get(test_id, {}).get('author_id') == chat_id

    @classmethod
    def view_quiz(cls, test_id: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.

        :param test_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–µ.
        """
        quiz = cls.quizzes.get(test_id)
        if not quiz:
            return ""

        quiz_info = ""
        for question_number, question_data in quiz.items():
            if question_number == "author_id":
                continue

            if question_data:
                quiz_info += f"‚ùì –í–æ–ø—Ä–æ—Å {question_number}: {question_data['question']}\n"
                quiz_info += f"  üîπ –û–ø—Ü–∏–∏: {question_data.get('options')}\n"
                quiz_info += f"  ‚≠êÔ∏è –ü–æ–∏–Ω—Ç—ã: {question_data.get('points')}\n"
                quiz_info += f"  üí° GPT: {question_data.get('gpt')}\n"
                quiz_info += f"  ‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data.get('correct_answer')}\n\n"

        return quiz_info

    @classmethod
    def reindex_questions(cls, quiz_id: str):
        """
        –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ—Å—Ç–µ, —á—Ç–æ–±—ã –∏—Ö –Ω–æ–º–µ—Ä–∞ —à–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

        :param quiz_id: –ö–æ–¥ —Ç–µ—Å—Ç–∞.
        """
        updated_questions = {}
        new_question_number = 1
        for question_num, question_data in cls.quizzes[quiz_id].items():
            if question_num == "author_id":
                updated_questions['author_id'] = question_data
                continue

            if question_data is None:
                continue

            updated_questions[str(new_question_number)] = question_data
            new_question_number += 1

        cls.quizzes[quiz_id] = updated_questions
